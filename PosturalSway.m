function [Y,Xf,Af] = PosturalSway(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 04-Apr-2018 17:44:56.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 2xQ matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-1.05176526717557;-0.00614080962965911];
x1_step1.gain = [1.08890187674524;46.5183598743354];
x1_step1.ymin = -1;

% Layer 1
b1 = [-4.3278074503763548;1.7601361481895397;-1.5561564946306137;-1.6567998304437734;0.22779698716038888;0.28776901061115495;0.34802547104276038;-1.2890490958202641;2.6489942336014742;-4.4532472580043825];
IW1_1 = [2.7121422798211068 -3.5398686277886946;-2.6123908189984117 -4.2826860471779202;-0.16829594482540336 -2.1433256224517208;2.9807438992185169 -1.6409366378644381;-2.4198559667477095 2.1229457337065285;-2.1269221646475942 0.15400769129161124;0.73104223596246554 3.2897634378074287;-0.94972656086391871 1.6761024324404881;4.256329912960048 -0.78470721307882463;-3.5026875230352106 2.3463310342371066];

% Layer 2
b2 = -0.13336527641311602;
LW2_1 = [-0.048584551775767926 -0.090532970603252702 -0.36345409896224012 -0.10728969712149895 0.11777302717513793 -0.15963954651966306 0.12550346358745598 0.48870337051839791 0.056513995289392688 -0.079906756218817654];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 31.0189034067719;
y1_step1.xoffset = -0.00921164681936388;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
