function [Y,Xf,Af] = PosturalSwayMap(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 05-Apr-2018 20:40:11.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx2 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx1 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-1.63358778625954;-5.12738549618321];
x1_step1.gain = [0.602348900337931;0.183473389355742];
x1_step1.ymin = -1;

% Layer 1
b1 = [-2.1640225469730372;-4.4335480763245689;3.1614553522757585;3.0015420503880987;0.4481864631924265;-0.15749707156281731;1.5922578062201163;-2.8655121048832584;-4.4892712247591664;3.2547868475233313];
IW1_1 = [0.0014070260452610092 -3.6851890279240029;0.18017569127524524 4.331769821576505;-1.2204697629776082 -2.1390968471433283;-1.8897968207447338 -2.5521511887789483;-1.288188200275558 3.5395400335875804;-0.0035268592795321546 -3.034074477948542;0.011178747463619519 -3.2280466731853545;-3.7327840591773351 2.1062750818598368;-3.7729842985658784 0.18789599473746774;4.8097039230485787 -0.1952709329441934];

% Layer 2
b2 = 0.22334163979910179;
LW2_1 = [1.6920282026654403 1.3851184967604562 1.1428424390952181 -0.21416600711863168 0.0046838165198397792 -2.1913864677518662 2.0156285552909177 0.0066511497900641672 -0.0065245900289757734 0.0023323051463028399];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 1.00000084158682;
y1_step1.xoffset = -0.999999775403933;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
